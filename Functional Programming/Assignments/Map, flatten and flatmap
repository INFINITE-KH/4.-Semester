Part 1: Map

The given code is for mapping, copy and paste it in your terminal to run it:
(defun myMap (f l) (if(equal (car l)nil) l (cons (funcall f(car l))(myMap f (cdr l)) )))

To get the output copy and paste the code below, which should return the result -> (5 7 9 11)
(myMap (lambda (a) (+ a 2)) (list 3 5 7 9)))

Part 2: Flattening

For the flatten exercise is the given code below:
(defun myFlat (l) (if (equal (car l)nil)l (append (car l)(myFlatten(cdr l)))))

For testing the code
(myFlat (list (list 1 2 3) (list 4 5 6)))

Part 3: Flat mapping

The syntax for flat mapping is provided below:
(defun myFlatMap (f l) (if (equal (car l)nil)l (append (myMap f(car l))(myFlatMap f (cdr l)))))

I don't know if part 3 is right because I don't know what to write for executing the code, 
if you have a solution please tell me, so I can confirm if it's right with the code i wrote
